import {
  Box,
  Button,
  Container,
  Flex,
  Heading,
  Text,
  VStack,
  HStack,
  Icon,
  Textarea,
  Select,
  Input,
  FormControl,
  FormLabel,
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
  Card,
  CardBody,
  Grid,
  Badge,
  useToast,
  Progress,
  Spinner,
} from '@chakra-ui/react';
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import {
  Video,
  Sparkles,
  Mic,
  Music,
  Image as ImageIcon,
  Download,
  Play,
  ArrowLeft,
  Wand2,
  FileText,
} from 'lucide-react';

function CreateVideo() {
  const navigate = useNavigate();
  const toast = useToast();
  const [step, setStep] = useState(0);
  const [generating, setGenerating] = useState(false);
  const [formData, setFormData] = useState({
    topic: '',
    niche: 'motivation',
    duration: '60',
    voiceGender: 'female',
    voiceAccent: 'american',
    musicGenre: 'uplifting',
    script: '',
  });

  const niches = [
    'Motivation',
    'Finance',
    'History',
    'Science',
    'Psychology',
    'Philosophy',
    'Technology',
    'Health & Fitness',
    'Business Tips',
    'Fun Facts',
  ];

  const voices = [
    { id: 1, name: 'Emma (Female, American)', gender: 'female', accent: 'american' },
    { id: 2, name: 'James (Male, British)', gender: 'male', accent: 'british' },
    { id: 3, name: 'Sofia (Female, Spanish)', gender: 'female', accent: 'spanish' },
    { id: 4, name: 'Alex (Male, Australian)', gender: 'male', accent: 'australian' },
    { id: 5, name: 'Priya (Female, Indian)', gender: 'female', accent: 'indian' },
    { id: 6, name: 'David (Male, American)', gender: 'male', accent: 'american' },
  ];

  const musicTracks = [
    { id: 1, name: 'Uplifting & Inspiring', genre: 'uplifting' },
    { id: 2, name: 'Calm & Peaceful', genre: 'calm' },
    { id: 3, name: 'Energetic & Upbeat', genre: 'energetic' },
    { id: 4, name: 'Cinematic & Epic', genre: 'cinematic' },
    { id: 5, name: 'Corporate & Professional', genre: 'corporate' },
    { id: 6, name: 'Ambient & Atmospheric', genre: 'ambient' },
  ];

  const handleGenerateScript = () => {
    setGenerating(true);
    setTimeout(() => {
      setFormData({
        ...formData,
        script: `Have you ever wondered what separates successful people from everyone else?\n\nIt's not talent. It's not luck. It's their daily habits.\n\nStudies show that 95% of our actions are habitual. That means your future is determined by what you do today.\n\nSuccessful people don't rely on motivation. They rely on systems. They build habits that compound over time.\n\nStart small. Focus on one habit. Make it so easy you can't say no.\n\nThat's how you build a life of success. One day at a time.`,
      });
      setGenerating(false);
      toast({
        title: 'Script generated!',
        description: 'Your AI-generated script is ready. Feel free to edit it.',
        status: 'success',
        duration: 3000,
      });
    }, 2000);
  };

  const handleCreateVideo = () => {
    setGenerating(true);
    setTimeout(() => {
      setGenerating(false);
      toast({
        title: 'Video created successfully!',
        description: 'Your video is being processed and will be ready in a few minutes.',
        status: 'success',
        duration: 5000,
      });
      navigate('/dashboard');
    }, 3000);
  };

  const steps = [
    { title: 'Topic & Niche', icon: FileText },
    { title: 'AI Script', icon: Sparkles },
    { title: 'Voice & Music', icon: Mic },
    { title: 'Review & Export', icon: Video },
  ];

  return (
    <Box minH="100vh" bg="gray.50">
      <Box bg="white" borderBottom="1px" borderColor="gray.200">
        <Container maxW="container.xl">
          <Flex py={4} justify="space-between" align="center">
            <HStack spacing={2} cursor="pointer" onClick={() => navigate('/dashboard')}>
              <Icon as={Video} boxSize={8} color="brand.600" />
              <Heading size="md" bgGradient="linear(to-r, brand.600, accent.600)" bgClip="text">
                VideoAI Pro
              </Heading>
            </HStack>
            <Button
              variant="ghost"
              leftIcon={<ArrowLeft />}
              onClick={() => navigate('/dashboard')}
            >
              Back to Dashboard
            </Button>
          </Flex>
        </Container>
      </Box>

      <Container maxW="container.lg" py={8}>
        <VStack spacing={8} align="stretch">
          <VStack spacing={2} textAlign="center">
            <Heading size="lg">Create Your Faceless Video</Heading>
            <Text color="gray.600">Follow the steps below to generate your video</Text>
          </VStack>

          <Card>
            <CardBody>
              <HStack spacing={4} mb={8} overflowX="auto" pb={2}>
                {steps.map((s, index) => (
                  <Flex key={index} align="center" minW="fit-content">
                    <Flex
                      w={10}
                      h={10}
                      borderRadius="full"
                      bg={step >= index ? 'brand.500' : 'gray.200'}
                      color={step >= index ? 'white' : 'gray.600'}
                      align="center"
                      justify="center"
                      fontWeight="bold"
                    >
                      {step > index ? '✓' : index + 1}
                    </Flex>
                    <Text
                      ml={2}
                      fontWeight={step === index ? 'bold' : 'normal'}
                      color={step >= index ? 'brand.600' : 'gray.600'}
                      fontSize="sm"
                    >
                      {s.title}
                    </Text>
                    {index < steps.length - 1 && (
                      <Box w="50px" h="2px" bg={step > index ? 'brand.500' : 'gray.200'} mx={4} />
                    )}
                  </Flex>
                ))}
              </HStack>

              {step === 0 && (
                <VStack spacing={6} align="stretch">
                  <FormControl>
                    <FormLabel fontWeight="semibold">Video Topic</FormLabel>
                    <Input
                      placeholder="e.g., 5 Daily Habits of Successful People"
                      size="lg"
                      value={formData.topic}
                      onChange={(e) => setFormData({ ...formData, topic: e.target.value })}
                    />
                  </FormControl>

                  <FormControl>
                    <FormLabel fontWeight="semibold">Niche / Category</FormLabel>
                    <Select
                      size="lg"
                      value={formData.niche}
                      onChange={(e) => setFormData({ ...formData, niche: e.target.value })}
                    >
                      {niches.map((niche, i) => (
                        <option key={i} value={niche.toLowerCase()}>
                          {niche}
                        </option>
                      ))}
                    </Select>
                  </FormControl>

                  <FormControl>
                    <FormLabel fontWeight="semibold">Video Duration</FormLabel>
                    <Select
                      size="lg"
                      value={formData.duration}
                      onChange={(e) => setFormData({ ...formData, duration: e.target.value })}
                    >
                      <option value="30">30 seconds (TikTok/Reels)</option>
                      <option value="60">60 seconds (TikTok/Reels/Shorts)</option>
                      <option value="90">90 seconds (YouTube Shorts)</option>
                      <option value="180">3 minutes (YouTube)</option>
                      <option value="300">5 minutes (YouTube)</option>
                    </Select>
                  </FormControl>

                  <Button colorScheme="brand" size="lg" onClick={() => setStep(1)}>
                    Continue to Script
                  </Button>
                </VStack>
              )}

              {step === 1 && (
                <VStack spacing={6} align="stretch">
                  <Flex justify="space-between" align="center">
                    <Heading size="md">AI Script Generator</Heading>
                    <Button
                      leftIcon={<Wand2 />}
                      colorScheme="purple"
                      onClick={handleGenerateScript}
                      isLoading={generating}
                      loadingText="Generating..."
                    >
                      Generate with AI
                    </Button>
                  </Flex>

                  {formData.topic && (
                    <Badge colorScheme="brand" p={2} borderRadius="md" fontSize="sm">
                      Topic: {formData.topic}
                    </Badge>
                  )}

                  <FormControl>
                    <FormLabel fontWeight="semibold">Video Script</FormLabel>
                    <Textarea
                      placeholder="Click 'Generate with AI' or write your own script..."
                      size="lg"
                      minH="300px"
                      value={formData.script}
                      onChange={(e) => setFormData({ ...formData, script: e.target.value })}
                    />
                    <Text fontSize="sm" color="gray.600" mt={2}>
                      {formData.script.length} characters • ~{Math.ceil(formData.script.length / 6)}{' '}
                      words
                    </Text>
                  </FormControl>

                  <HStack>
                    <Button variant="outline" onClick={() => setStep(0)}>
                      Back
                    </Button>
                    <Button
                      colorScheme="brand"
                      flex={1}
                      onClick={() => setStep(2)}
                      isDisabled={!formData.script}
                    >
                      Continue to Voice & Music
                    </Button>
                  </HStack>
                </VStack>
              )}

              {step === 2 && (
                <VStack spacing={6} align="stretch">
                  <Heading size="md">Choose Voice & Music</Heading>

                  <FormControl>
                    <FormLabel fontWeight="semibold">AI Voice</FormLabel>
                    <Grid templateColumns={{ base: '1fr', md: 'repeat(2, 1fr)' }} gap={4}>
                      {voices.map((voice) => (
                        <Card
                          key={voice.id}
                          cursor="pointer"
                          borderWidth={2}
                          borderColor={
                            formData.voiceGender === voice.gender &&
                            formData.voiceAccent === voice.accent
                              ? 'brand.500'
                              : 'gray.200'
                          }
                          onClick={() =>
                            setFormData({
                              ...formData,
                              voiceGender: voice.gender,
                              voiceAccent: voice.accent,
                            })
                          }
                          _hover={{ borderColor: 'brand.300' }}
                          transition="all 0.3s"
                        >
                          <CardBody>
                            <HStack justify="space-between">
                              <VStack align="start" spacing={1}>
                                <Text fontWeight="semibold">{voice.name}</Text>
                              </VStack>
                              <Icon as={Play} boxSize={5} color="brand.500" />
                            </HStack>
                          </CardBody>
                        </Card>
                      ))}
                    </Grid>
                  </FormControl>

                  <FormControl>
                    <FormLabel fontWeight="semibold">Background Music</FormLabel>
                    <Grid templateColumns={{ base: '1fr', md: 'repeat(2, 1fr)' }} gap={4}>
                      {musicTracks.map((track) => (
                        <Card
                          key={track.id}
                          cursor="pointer"
                          borderWidth={2}
                          borderColor={
                            formData.musicGenre === track.genre ? 'brand.500' : 'gray.200'
                          }
                          onClick={() => setFormData({ ...formData, musicGenre: track.genre })}
                          _hover={{ borderColor: 'brand.300' }}
                          transition="all 0.3s"
                        >
                          <CardBody>
                            <HStack justify="space-between">
                              <Text fontWeight="semibold">{track.name}</Text>
                              <Icon as={Music} boxSize={5} color="brand.500" />
                            </HStack>
                          </CardBody>
                        </Card>
                      ))}
                    </Grid>
                  </FormControl>

                  <HStack>
                    <Button variant="outline" onClick={() => setStep(1)}>
                      Back
                    </Button>
                    <Button colorScheme="brand" flex={1} onClick={() => setStep(3)}>
                      Continue to Review
                    </Button>
                  </HStack>
                </VStack>
              )}

              {step === 3 && (
                <VStack spacing={6} align="stretch">
                  <Heading size="md">Review & Generate</Heading>

                  <Card bg="gray.50">
                    <CardBody>
                      <VStack spacing={4} align="stretch">
                        <HStack justify="space-between">
                          <Text fontWeight="semibold">Topic:</Text>
                          <Text>{formData.topic || 'Not specified'}</Text>
                        </HStack>
                        <HStack justify="space-between">
                          <Text fontWeight="semibold">Niche:</Text>
                          <Badge colorScheme="brand">{formData.niche}</Badge>
                        </HStack>
                        <HStack justify="space-between">
                          <Text fontWeight="semibold">Duration:</Text>
                          <Text>{formData.duration} seconds</Text>
                        </HStack>
                        <HStack justify="space-between">
                          <Text fontWeight="semibold">Script Length:</Text>
                          <Text>{formData.script.length} characters</Text>
                        </HStack>
                        <HStack justify="space-between">
                          <Text fontWeight="semibold">Voice:</Text>
                          <Text>
                            {formData.voiceGender} - {formData.voiceAccent}
                          </Text>
                        </HStack>
                        <HStack justify="space-between">
                          <Text fontWeight="semibold">Music:</Text>
                          <Text>{formData.musicGenre}</Text>
                        </HStack>
                      </VStack>
                    </CardBody>
                  </Card>

                  {generating && (
                    <Card>
                      <CardBody>
                        <VStack spacing={4}>
                          <Spinner size="xl" color="brand.500" thickness="4px" />
                          <Text fontWeight="semibold">Generating your video...</Text>
                          <Progress value={66} colorScheme="brand" w="full" borderRadius="full" />
                          <Text fontSize="sm" color="gray.600">
                            This may take 1-2 minutes
                          </Text>
                        </VStack>
                      </CardBody>
                    </Card>
                  )}

                  <HStack>
                    <Button variant="outline" onClick={() => setStep(2)} isDisabled={generating}>
                      Back
                    </Button>
                    <Button
                      colorScheme="brand"
                      flex={1}
                      leftIcon={<Sparkles />}
                      onClick={handleCreateVideo}
                      isLoading={generating}
                      loadingText="Generating..."
                    >
                      Generate Video
                    </Button>
                  </HStack>
                </VStack>
              )}
            </CardBody>
          </Card>
        </VStack>
      </Container>
    </Box>
  );
}

export default CreateVideo;
